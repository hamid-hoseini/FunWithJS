// Coding Interview Question

/*
Reference: https://www.geeksforgeeks.org/look-and-say-sequence/
Find the n’th term in Look-and-say (Or Count and Say) Sequence. The look-and-say sequence is the sequence of the below integers: 
1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, … 

How is the above sequence generated? 
n’th term is generated by reading (n-1)’th term.

The first term is "1"
Second term is "11", generated by reading first term as "One 1" 
(There is one 1 in previous term)
Third term is "21", generated by reading second term as "Two 1"
Fourth term is "1211", generated by reading third term as "One 2 One 1" 
and so on


The idea is simple, we generate all terms from 1 to n. First, two terms are initialized as “1” 
and “11”, and all other terms are generated using previous terms. To generate a term using the 
previous term, we scan the previous term. While scanning a term, we simply keep track of the 
count of all consecutive characters. For a sequence of the same characters, we append the count 
followed by the character to generate the next term.
*/


// Javascript program to find n'th 
// term in look and say sequence
    
// Returns n'th term in 
// look-and-say sequence
function countnndSay(n) {
    
    // Base cases
    if (n == 1)     
        return "1";
    if (n == 2)     
        return "11";
  
    // Find n'th term by generating 
    // all terms from 3 to n-1. 
    // Every term is generated 
    // using previous term
      
    // Initialize previous term
    let str = "11"; 
    
    for(let i = 3; i <= n; i++)
    {
        
        // In below for loop, previous 
        // character is processed in 
        // current iteration. That is
        // why a dummy character is 
        // added to make sure that loop
        // runs one extra iteration.
        str += '$';
        let len = str.length;
        
        // Initialize count 
        // of matching chars
        let cnt = 1; 
        
        // Initialize i'th 
        // term in series
        let tmp = ""; 
        let arr = str.split("");
          
        // Process previous term
        // to find the next term
        for(let j = 1; j < len; j++)
        {
            
            // If current character
            // doesn't match
            if (arr[j] != arr[j - 1])
            {
                
                // Append count of 
                // str[j-1] to temp
                tmp += cnt;
  
                // Append str[j-1]
                tmp += arr[j - 1];
  
                // Reset count
                cnt = 1;
            }
  
            // If matches, then increment 
            // count of matching characters
            else cnt++;
        }
  
        // Update str
        str = tmp;
    }
    return str;
}

// Driver Code
let N = 3;

console.log(countnndSay(N));

/*
Time Complexity : O(n2) 
Auxiliary Space : O(1)
*/


// Solution2:
/*
Using STL:
There is one more idea where we can use unordered_map from c++ stl to track the count of digits. 
Basic idea is to use a generator function that will generate a string from the previous string. 
In the count and say function we will iterate over integers from 1 to n-1 and keep updating our result.
*/

// generator function returns the count-and-say string for the previous string
// e.g. it will return '1211' for '21' (One 2's and One 1's)
function generator(str) {
  let ans = "";
  let tempCount = new Map(); // It is used to count integer sequences

  for (let i = 0; i < str.length + 1; i++) {
    // When the current character is different from the previous one,
    // we clear the map and update the ans
    if (!tempCount.has(str[i]) && i > 0) {
      const prev = tempCount.get(str[i - 1]);
      ans += prev + str[i - 1];
      tempCount.clear();
    }

    // When the current character is the same as the previous one,
    // we increase its count value
    tempCount.set(str[i], (tempCount.get(str[i]) || 0) + 1);
  }

  return ans;
}

function countAndSay1(n) {
  let res = "1"; // res variable keeps track of strings from 1 to n-1

  // For loop iterates n-1 times and generates strings in sequence
  // "1" -> "11" -> "21" -> "1211"
  for (let i = 1; i < n; i++) {
    res = generator(res);
  }

  return res;
}

const N = 3;
console.log(countAndSay1(N));
